version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: afteride-postgres
    environment:
      POSTGRES_DB: afteride
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: afteride-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (for production deployment)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: afteride-backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/afteride
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - production

  # Frontend (for production deployment)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: afteride-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: afteride-network 